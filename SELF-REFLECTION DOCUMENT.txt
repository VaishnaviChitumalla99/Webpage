SELF-REFLECTION DOCUMENT

Contributions To the Project
In this project, I was responsible for implementing the complete CRUD operations Create, Read, Update, and Delete for managing the trip data within the TripSphere travel planner. I have developed a centralized JavaScript file (crud.js) that dynamically detects the current HTML context and executes the corresponding operations. I have created functional buttons for each operations and each button is navigating to a relevant static page representing the CRUD action. Users can create new trips in the Book Now page, where a dedicated form allows them to input details such as destination, country, duration, and budget. Once it is saved, these entries are stored in the browser's localStorage and instantly displayed in the Live Preview of Saved Trips (read.html) section on the same page. The Dashboard page  features structured views for modifying and deleting existing trips, with dedicated tabs modify.html for editing trip entries through dynamic input fields and update buttons, and delete.html for removing trips. All operations are visually reflected in real-time on the interactive dashboard charts, ensuring that any updates to the trip data also update the graphs accordingly. Additionally, I applied consistent UI styling using both internal and external CSS to ensure a user-friendly and cohesive design. I also created clear and accessible navigation between pages, allowing seamless interaction and smooth operation across the entire application.

Challenges Faced And How They Were Addressed
During the development of the project, I faced a few key challenges. One major issue was how to display the trip data differently on each page like read-only, update, or delete—while using the same JavaScript file. I solved this by checking the current page using window.location.pathname and then conditionally rendering the right content based on which page was open. Another challenge was saving user trip data without using any backend database. To handle this, I used the browser’s localStorage to store, retrieve, and update trip details, which allowed the data to stay even after the page was refreshed. I also had to be very careful while updating and deleting records. It was tricky to keep the form fields in sync with the saved trip data, but I managed it by using querySelectorAll() to dynamically capture the input values and then update the correct item in the data array.

Key Learnings
This project helped me learn many important skills. I gained a better understanding of JavaScript, especially how to work with the DOM and handle events. I also learned how to use localStorage to save data on the browser and how to write modular code that works across different pages. It improved my ability to structure HTML and CSS for a clean, user-friendly design. Most importantly, I learned how to make the webpage respond based on the URL, which allowed different functions to work on different pages.

Time Spent- 15 Hours (Approx)
The total time invested in the project was approximately 15 hours, with about 2 hours dedicated to planning and wireframing, 3 hours for HTML page development, 5 hours for implementing JavaScript logic, 2 hours for testing and debugging, and another 3 hours for styling and polishing the user interface.
